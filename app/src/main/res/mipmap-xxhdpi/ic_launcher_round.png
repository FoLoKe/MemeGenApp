package com.foloke.hazard_perimeter;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.opengl.GLES20;
import android.opengl.GLSurfaceView;
import android.opengl.Matrix;

import com.foloke.hazard_perimeter.game.GameManager;
import com.foloke.hazard_perimeter.game.utilities.ShaderUtils;
import com.foloke.hazard_perimeter.game.utilities.SpriteSheet;
import com.foloke.hazard_perimeter.game.utilities.Text;
import com.foloke.hazard_perimeter.game.utilities.TextureUtils;
import com.foloke.hazard_perimeter.game.utilities.shaders.ColoredShader;
import com.foloke.hazard_perimeter.game.utilities.shaders.Shader;
import com.foloke.hazard_perimeter.game.utilities.shaders.TexturedShader;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import static android.opengl.GLES20.GL_BLEND;
import static android.opengl.GLES20.GL_COLOR_ATTACHMENT0;
import static android.opengl.GLES20.GL_COLOR_BUFFER_BIT;
import static android.opengl.GLES20.GL_CULL_FACE;
import static android.opengl.GLES20.GL_DEPTH_ATTACHMENT;
import static android.opengl.GLES20.GL_DEPTH_BUFFER_BIT;
import static android.opengl.GLES20.GL_DEPTH_TEST;
import static android.opengl.GLES20.GL_FRAGMENT_SHADER;
import static android.opengl.GLES20.GL_FRAMEBUFFER;
import static android.opengl.GLES20.GL_FRAMEBUFFER_COMPLETE;
import static android.opengl.GLES20.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
import static android.opengl.GLES20.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
import static android.opengl.GLES20.GL_LINES;
import static android.opengl.GLES20.GL_ONE_MINUS_SRC_ALPHA;
import static android.opengl.GLES20.GL_RENDERBUFFER;
import static android.opengl.GLES20.GL_RGB;
import static android.opengl.GLES20.GL_RGBA;
import static android.opengl.GLES20.GL_SRC_ALPHA;
import static android.opengl.GLES20.GL_TEXTURE;
import static android.opengl.GLES20.GL_TEXTURE_2D;
import static android.opengl.GLES20.GL_UNSIGNED_BYTE;
import static android.opengl.GLES20.GL_VERTEX_SHADER;
import static android.opengl.GLES20.glBindFramebuffer;
import static android.opengl.GLES20.glBindRenderbuffer;
import static android.opengl.GLES20.glBindTexture;
import static android.opengl.GLES20.glBlendFunc;
import static android.opengl.GLES20.glCheckFramebufferStatus;
import static android.opengl.GLES20.glClear;
import static android.opengl.GLES20.glClearColor;
import static android.opengl.GLES20.glDeleteFramebuffers;
import static android.opengl.GLES20.glDeleteRenderbuffers;
import static android.opengl.GLES20.glDeleteTextures;
import static android.opengl.GLES20.glDrawArrays;
import static android.opengl.GLES20.glEnable;
import static android.opengl.GLES20.glFramebufferRenderbuffer;
import static android.opengl.GLES20.glFramebufferTexture2D;
import static android.opengl.GLES20.glGenFramebuffers;
import static android.opengl.GLES20.glGenRenderbuffers;
import static android.opengl.GLES20.glGenTextures;
import static android.opengl.GLES20.glGetError;
import static android.opengl.GLES20.glGetString;
import static android.opengl.GLES20.glLineWidth;
import static android.opengl.GLES20.glRenderbufferStorage;
import static android.opengl.GLES20.glTexImage2D;
import static android.opengl.GLES20.glTexParameteri;
import static android.opengl.GLES20.glUseProgram;
import static android.opengl.GLES20.glViewport;
import static android.opengl.GLES20.GL_DEPTH_COMPONENT16;

public class GameRenderer implements GLSurfaceView.Renderer {

    private GameManager gameManager;
    private Context context;

    private FloatBuffer axesVertexData;

    public ColoredShader coloredShader;
    public TexturedShader texturedShader;
    public Shader currShader;

    private float[] mUIViewMatrix = new float[16];
    private float[] mOrthoProjectionMatrix = new float[16];
    private float[] mProjectionMatrix = new float[16];
    private float[] mViewMatrix = new float[16];
    public float[] mModelMatrix = new float[16];
    private float[] mMatrix = new float[16];

    public int fontTextureID;
    /////DEBUG
    private double lastTime;
    private float  FPS;
    private String FPSstring;

    public GameRenderer(Context context, GameManager gameManager) {
        this.gameManager = gameManager;
        this.context = context;
    }

    private void prepareDataForAxes() {
        float[] vertices = {
                //OX
                -3f, 0, 0,
                3f, 0, 0,

                //OY
                0, -3f, 0,
                0, 3f, 0,

                //OZ
                0, 0, -3f,
                0, 0, 3f
        };

        axesVertexData = ByteBuffer
                .allocateDirect(vertices.length * 4)
                .order(ByteOrder.nativeOrder())
                .asFloatBuffer();
        axesVertexData.put(vertices);
    }



    public void bindMatrix() {
        Matrix.multiplyMM(mMatrix, 0, mViewMatrix, 0, mModelMatrix, 0);
        Matrix.multiplyMM(mMatrix, 0, mProjectionMatrix, 0, mMatrix, 0);
        currShader.setModelMatrix(mMatrix);
    }

    public void bindOrthoMatrix()
    {
        Matrix.multiplyMM(mMatrix, 0, mUIViewMatrix, 0, mModelMatrix, 0);
        Matrix.multiplyMM(mMatrix, 0, mOrthoProjectionMatrix, 0, mMatrix, 0);
        currShader.setModelMatrix(mMatrix);
    }

    private void createProjectionMatrix(int width, int height) {
        float ratio;
        float left = -1;
        float right = 1;
        float bottom = -1;
        float top = 1;
        float near = 2;
        float far = 100;
        if (width > height) {
            ratio = (float) width / height;
            left *= ratio;
            right *= ratio;
        } else {
            ratio = (float) height / width;
            bottom *= ratio;
            top *= ratio;
        }

        Matrix.frustumM(mProjectionMatrix, 0, left, right, bottom, top, near, far);

        Matrix.orthoM(mOrthoProjectionMatrix, 0, -1, 1, -1, 1, near, far);
    }

    private void createViewMatrix() {
        // cam position
        float eyeX = 1;
        float eyeY = 0;
        float eyeZ = 10;

        // look point
        float centerX = 1;
        float centerY = 0;
        float centerZ = 0;

        // cam up
        float upX = 0;
        float upY = 1;
        float upZ = 0;

        Matrix.setLookAtM(mViewMatrix, 0, eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
        Matrix.setLookAtM(mUIViewMatrix, 0, 0, 0, 10, 0, 0, 0, 0, 1, 0);
    }

    public void set2DViewMatrix(float x, float y)
    {
        float eyeX = x / 32;
        float eyeY = y / 32;
        float eyeZ = 10;

        // look point
        float centerX = x / 32;
        float centerY = y / 32;
        float centerZ = 0;

        // cam up
        float upX = 0;
        float upY = 1;
        float upZ = 0;
        Matrix.setLookAtM(mViewMatrix, 0, eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
    }

    public void resetModelMatrix()
    {
        Matrix.setIdentityM(mModelMatrix, 0);
    }

    public void setModelMatrix(float x, float y, float z, float sx, float sy, float rz) {

        Matrix.translateM(mModelMatrix, 0, x / 32, y / 32, z / 32);
        Matrix.rotateM(mModelMatrix, 0, rz, 0, 0, 1);
        Matrix.scaleM(mModelMatrix,0, -1 * sx, sy, 1);

    }

    public void setUIModelMatrix(float x, float y, float z) {
        Matrix.translateM(mModelMatrix, 0, x , y , z );
        //Matrix.rotateM(mModelMatrix, 0, 180, 0, 0, 0);
        //Matrix.rotateM(mModelMatrix, 0, 180, 0, 0, 0);
        Matrix.scaleM(mModelMatrix,0, -1, 1, 1);

    }

    private void drawAxes() {
        useShader(coloredShader);
        currShader.setVertexData(axesVertexData);
        resetModelMatrix();
        bindMatrix();

        glLineWidth(3);
        coloredShader.setColor(1.0f, 0.0f, 0.0f, 1.0f);
        glDrawArrays(GL_LINES, 0, 2);

        coloredShader.setColor(0.0f, 0.0f, 1.0f, 1.0f);
        glDrawArrays(GL_LINES, 2, 2);

        coloredShader.setColor(1.0f, 1.0f, 0.0f, 1.0f);
        glDrawArrays(GL_LINES, 4, 2);
    }

    private void shade()
    {
        //FRAME BUFFER
        int[] fbo = new int[1];
        glGenFramebuffers(1, fbo,0);
        glBindFramebuffer(GL_FRAMEBUFFER, 1);

        //TEXTURE
        int[] shadeTexture = new int[1];
        glGenTextures(1, shadeTexture, 0);
        glBindTexture(GL_TEXTURE_2D, shadeTexture[0]);

        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 800, 600, 0, GL_RGB, GL_UNSIGNED_BYTE, null);

        glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);
        glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_NEAREST);
        //glBindTexture(GL_TEXTURE_2D, 0);

        //BIND TEXTURE TO FRAMEBUFFER
        glFramebufferTexture2D(fbo[0], GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, shadeTexture[0]);

        //RENDER BUFFER
        int[] rbo = new int[1];
        glGenRenderbuffers(0, rbo, 0);
        glBindRenderbuffer(GL_RENDERBUFFER, rbo[0]);
        glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT16,800,600);
        glBindRenderbuffer(GL_RENDERBUFFER, 0);

        //BIND RENDERBUFFER TO FRAMEBUFFER
        //glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, rbo[0]);

        if (glCheckFramebufferStatus(GL_FRAMEBUFFER) == GL_FRAMEBUFFER_COMPLETE) {

        }
        else
            System.out.println("ERROR " +  glCheckFramebufferStatus(GL_FRAMEBUFFER) + " " + GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT );


        glBindFramebuffer(GL_FRAMEBUFFER, 0);
        glDeleteFramebuffers(1, fbo, 0);
        glDeleteRenderbuffers(1, rbo, 0);
        glDeleteTextures(1, shadeTexture, 0);
    }

    @Override
    public void onDrawFrame(GL10 arg0) {
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);



        gameManager.tick();
        gameManager.render(this);

        FPS++;
        if(System.currentTimeMillis() - lastTime > 1000)
        {
            System.out.println(FPS);
            FPSstring = "FPS 